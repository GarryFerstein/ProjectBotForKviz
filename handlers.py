import logging
from aiogram import types, F
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from quiz_data import quiz_data
from db import update_quiz_index, get_quiz_state
from config import QUIZ_COVER_IMAGE_URL

def generate_options_keyboard(answer_options, right_answer):
    builder = InlineKeyboardBuilder()
    for option in answer_options:
        builder.add(types.InlineKeyboardButton(
            text=option,
            callback_data=f"answer:{option}:{'right' if option == right_answer else 'wrong'}"
        ))
    builder.adjust(1)
    return builder.as_markup()

async def get_question(message, user_id):
    state = await get_quiz_state(user_id)
    current_question_index = state["question_index"]
    if current_question_index >= len(quiz_data):
        await message.answer("–í–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return
    correct_index = quiz_data[current_question_index]['correct_option']
    opts = quiz_data[current_question_index]['options']
    kb = generate_options_keyboard(opts, opts[correct_index])
    await message.answer(f"{quiz_data[current_question_index]['question']}", reply_markup=kb)

async def new_quiz(message):
    user_id = message.from_user.id
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏ —Å—á—ë—Ç—á–∏–∫
    await update_quiz_index(user_id, 0, 0)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É –∫–≤–∏–∑–∞
    await message.answer_photo(
        photo=QUIZ_COVER_IMAGE_URL,
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑! –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è?",
        reply_markup=None
    )
    # –ù–∞—á–∏–Ω–∞–µ–º –∫–≤–∏–∑
    await get_question(message, user_id)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(
        types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"),
        types.KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    )
    builder.adjust(2)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑!", reply_markup=builder.as_markup(resize_keyboard=True))

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /quiz –∏ –∫–Ω–æ–ø–∫—É
async def cmd_quiz(message: types.Message):
    await new_quiz(message)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /stats –∏ –∫–Ω–æ–ø–∫—É
async def cmd_stats(message: types.Message):
    user_id = message.from_user.id
    state = await get_quiz_state(user_id)
    total_questions = len(quiz_data)
    if state["question_index"] == 0 and state["correct_answers"] == 0:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∫–≤–∏–∑.")
    else:
        await message.answer(f"–í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {state['correct_answers']} –∏–∑ {total_questions} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")

async def show_stats(message: types.Message):
    await cmd_stats(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def handle_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data.split(":")
    selected_answer = data[1]
    result = data[2]

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.bot.edit_message_reply_markup(
        chat_id=user_id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = await get_quiz_state(user_id)
    current_question_index = state["question_index"]
    correct_option_index = quiz_data[current_question_index]["correct_option"]
    correct_text = quiz_data[current_question_index]["options"][correct_option_index]

    if result == "right":
        await callback.message.answer(f"–í–∞—à –æ—Ç–≤–µ—Ç: {selected_answer}\n‚úÖ –í–µ—Ä–Ω–æ!")
        new_correct_count = state["correct_answers"] + 1
    else:
        await callback.message.answer(f"–í–∞—à –æ—Ç–≤–µ—Ç: {selected_answer}\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_text}")
        new_correct_count = state["correct_answers"]

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    next_question_index = current_question_index + 1

    if next_question_index < len(quiz_data):
        await update_quiz_index(user_id, next_question_index, new_correct_count)
        await get_question(callback.message, user_id)
    else:
        # –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω
        final_score = new_correct_count
        total_questions = len(quiz_data)
        await update_quiz_index(user_id, next_question_index, final_score)
        await callback.message.answer(f"üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {final_score} –∏–∑ {total_questions} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")